{"ast":null,"code":"import dbconnect from '../../../middleware/dbMiddleware';\nimport Labtop from '../../../Model/Labtop';\n\nconst handleId = async (req, res) => {\n  const {\n    query: {\n      id\n    },\n    method\n  } = req;\n\n  switch (method) {\n    case 'GET':\n      try {\n        const labtop = await Labtop.findById(id);\n        res.status(200).json({\n          success: true,\n          data: labtop\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'PATCH':\n      try {\n        const laptop = await Labtop.findByIdAndUpdate(id, req.body, {\n          new: true,\n          runValidators: true\n        });\n        console.log(laptop);\n\n        if (!laptop) {\n          return res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(201).json({\n          success: true,\n          data: laptop\n        });\n      } catch (err) {\n        res.status(400).json({\n          success: false,\n          error: err.message\n        });\n      }\n\n      break;\n\n    case 'DELETE':\n      try {\n        const laptop = await Labtop.findByIdAndDelete(id);\n        console.log(laptop);\n\n        if (!laptop) {\n          return res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true\n        });\n      } catch (err) {\n        res.status(400).json({\n          success: false,\n          error: err.message\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false\n      });\n      break;\n  }\n};\n\nexport default dbconnect(handleId);","map":{"version":3,"sources":["C:/Users/Hp/Desktop/nextjs/pages/api/laptops/[id].js"],"names":["dbconnect","Labtop","handleId","req","res","query","id","method","labtop","findById","status","json","success","data","error","laptop","findByIdAndUpdate","body","new","runValidators","console","log","err","message","findByIdAndDelete"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,kCAAtB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;;AAEA,MAAMC,QAAQ,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AACFC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KADL;AAEFC,IAAAA;AAFE,MAGFJ,GAHJ;;AAKF,UAAQI,MAAR;AACE,SAAK,KAAL;AACE,UAAI;AACF,cAAMC,MAAM,GAAG,MAAMP,MAAM,CAACQ,QAAP,CAAgBH,EAAhB,CAArB;AACAF,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEL;AAAvB,SAArB;AACD,OAHD,CAGE,OAAOM,KAAP,EAAc;AACdV,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AACD;;AACD;;AACF,SAAK,OAAL;AACE,UAAI;AACF,cAAMG,MAAM,GAAG,MAAMd,MAAM,CAACe,iBAAP,CAAyBV,EAAzB,EAA6BH,GAAG,CAACc,IAAjC,EAAuC;AACxDC,UAAAA,GAAG,EAAE,IADmD;AAExDC,UAAAA,aAAa,EAAE;AAFyC,SAAvC,CAArB;AAIAC,QAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;;AAEA,YAAI,CAACA,MAAL,EAAa;AACT,iBAAOX,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAAP;AACH;;AACDR,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEE;AAAvB,SAArB;AACD,OAXD,CAWE,OAAOO,GAAP,EAAY;AACZlB,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,KAAX;AAAmBE,UAAAA,KAAK,EAAEQ,GAAG,CAACC;AAA9B,SAArB;AACD;;AAED;;AACF,SAAK,QAAL;AACI,UAAI;AACF,cAAMR,MAAM,GAAG,MAAMd,MAAM,CAACuB,iBAAP,CAAyBlB,EAAzB,CAArB;AACAc,QAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;;AAEA,YAAI,CAACA,MAAL,EAAa;AACT,iBAAOX,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CAAP;AACH;;AACDR,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AACD,OARD,CAQE,OAAOU,GAAP,EAAY;AACZlB,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,KAAX;AAAmBE,UAAAA,KAAK,EAAEQ,GAAG,CAACC;AAA9B,SAArB;AACD;;AACH;;AACF;AACEnB,MAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB;AACA;AAzCJ;AA2CD,CAjDD;;AAkDA,eAAeZ,SAAS,CAACE,QAAD,CAAxB","sourcesContent":["import dbconnect from '../../../middleware/dbMiddleware';\r\nimport Labtop from '../../../Model/Labtop';\r\n\r\nconst handleId = async (req, res) => {\r\n    const {\r\n        query: { id },\r\n        method\r\n    } = req;\r\n \r\n  switch (method) {\r\n    case 'GET':\r\n      try {\r\n        const labtop = await Labtop.findById(id);\r\n        res.status(200).json({ success: true, data: labtop });\r\n      } catch (error) {\r\n        res.status(400).json({ success: false });\r\n      }\r\n      break;\r\n    case 'PATCH':\r\n      try {  \r\n        const laptop = await Labtop.findByIdAndUpdate(id, req.body, {\r\n            new: true,\r\n            runValidators: true\r\n        });\r\n        console.log(laptop);\r\n       \r\n        if (!laptop) {\r\n            return res.status(400).json({ success: false });\r\n        }\r\n        res.status(201).json({ success: true, data: laptop });\r\n      } catch (err) {\r\n        res.status(400).json({ success: false , error: err.message});\r\n      }\r\n      \r\n      break;\r\n    case 'DELETE':\r\n        try {  \r\n          const laptop = await Labtop.findByIdAndDelete(id);\r\n          console.log(laptop);\r\n         \r\n          if (!laptop) {\r\n              return res.status(400).json({ success: false });\r\n          }\r\n          res.status(200).json({ success: true, });\r\n        } catch (err) {\r\n          res.status(400).json({ success: false , error: err.message});\r\n        }\r\n      break;\r\n    default:\r\n      res.status(400).json({ success: false });\r\n      break;\r\n  }\r\n};\r\nexport default dbconnect(handleId);\r\n"]},"metadata":{},"sourceType":"module"}